// eslint.config.mjs
import js from '@eslint/js';
import tseslint from 'typescript-eslint';
import react from 'eslint-plugin-react';
import hooks from 'eslint-plugin-react-hooks';
import jsxA11y from 'eslint-plugin-jsx-a11y';
import globals from 'globals';

export default [
  // Ignore build/native & temp copies so we don't lint bundles or backups
  {
    ignores: [
      'node_modules/**',
      '.next/**',
      '.turbo/**',
      'out/**',
      '.vercel/**',
      'public/**',
      'android/**',
      'ios/**',
      'temp-cleanup/**',        // ‚Üê your duplicated APIs
      '**/_next/**',
    ],
  },

  js.configs.recommended,

  // Base TS rules (no type info required)
  ...tseslint.configs.recommended,

  // Type-aware TS rules
  ...tseslint.configs.recommendedTypeChecked,

  // Project rules (TS/React only)
  {
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      globals: {
        ...globals.browser,
        ...globals.node,
      },
    },
    plugins: {
      react,
      'react-hooks': hooks,
      'jsx-a11y': jsxA11y,
    },
    settings: {
      react: { version: 'detect' },
    },
    rules: {
      // prefer TS rule; allow leading underscore to intentionally ignore
      'no-unused-vars': 'off',
      '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_', varsIgnorePattern: '^_' }],

      'react/react-in-jsx-scope': 'off',
      'react/jsx-uses-react': 'off',
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn',
    },
  },

  // Generated by Next; don't fight it
  {
    files: ['next-env.d.ts'],
    rules: {
      '@typescript-eslint/triple-slash-reference': 'off',
    },
  },
];
