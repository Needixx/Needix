// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model WebhookEvent {
  id         String   @id
  type       String
  receivedAt DateTime @default(now())
  
  @@index([receivedAt])
}

model User {
  id                       String         @id @default(cuid())
  name                     String?
  email                    String?        @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?
  passwordResetToken       String?        @unique
  passwordResetTokenExpiry DateTime?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  isPro                    Boolean        @default(false)
  stripeCustomerId         String?        @unique
  stripeSubscriptionId     String?        @unique
  planStatus               PlanStatus?
  currentPeriodEnd         DateTime?
  cancelAtPeriodEnd        Boolean?       @default(false)
  
  // 2FA Fields
  twoFactorEnabled         Boolean        @default(false)
  
  // Relations
  accounts                 Account[]
  expenses                 Expense[]
  orders                   Order[]
  sessions                 Session[]
  subscriptions            Subscription[]
  verificationCodes        VerificationCode[]
  chatMessages             ChatMessage[]

  // Notification-related relations
  pushSubscription         PushSubscription?
  notificationSettings     NotificationSettings?
  notificationLogs         NotificationLog[]
  reminderSnapshots        ReminderSnapshot[]
  scheduledNotifications   ScheduledNotification[]

  // AI-related relations
  aiRecommendationLogs     AIRecommendationLog[]
  savingsGoals             SavingsGoal[]
  reminders                Reminder[]
  aiSettings               AIUserSettings?
  marketDataCache          MarketDataCache[]
  usageTracking            UsageTracking[]

  // Plaid/Bank integration relations
  bankAccounts             BankAccount[]
  transactions             Transaction[]
  plaidItems               PlaidItem[]

  @@index([email])
  @@index([stripeCustomerId])
  @@index([isPro])
  @@index([twoFactorEnabled])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])
  @@index([used])
  @@index([userId, used])
  @@map("verification_codes")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  role      String   // "user" or "assistant"
  content   String
  context   String?  // Optional context data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([userId, createdAt])
}

model SubscriptionEvent {
  id        String   @id @default(cuid())
  userId    String
  userEmail String
  event     String
  timestamp DateTime @default(now())
  metadata  Json?

  @@index([userId])
  @@index([timestamp])
}

model UserActivity {
  id                 String   @id @default(cuid())
  userId             String
  subscriptionsCount Int
  lastActiveDate     DateTime
  totalSpent         Float    @default(0)
  planType           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
  @@index([lastActiveDate])
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String
  name            String
  amount          Decimal            @db.Decimal(12, 2)
  currency        String             @default("USD")
  interval        Recurrence         @default(monthly)
  nextBillingAt   DateTime?
  nextBillingDate String?            // String version for compatibility
  notes           String?
  category        String?
  vendorUrl       String?
  status          SubscriptionStatus @default(active)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  isEssential     Boolean            @default(false)
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Plaid integration - transactions detected as this subscription
  detectedTransactions Transaction[]

  @@index([userId])
  @@index([status])
  @@index([interval])
  @@index([isEssential])
  @@index([userId, status])
  @@index([userId, nextBillingAt])
  @@index([nextBillingAt])
  @@index([nextBillingDate])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  merchant    String
  total       Decimal     @db.Decimal(12, 2)
  currency    String      @default("USD")
  orderDate   DateTime    @default(now())
  status      OrderStatus @default(active)
  notes       String?
  category    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isEssential Boolean     @default(false)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@index([userId])
  @@index([orderDate])
  @@index([merchant])
  @@index([status])
  @@index([isEssential])
  @@index([userId, orderDate])
  @@index([userId, status])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  name      String
  qty       Int      @default(1)
  unitPrice Decimal? @db.Decimal(12, 2)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Expense {
  id          String     @id @default(cuid())
  userId      String
  description String
  amount      Decimal    @db.Decimal(12, 2)
  currency    String     @default("USD")
  date        DateTime   @default(now())
  merchant    String?
  category    String?
  recurrence  Recurrence @default(none)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isEssential Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([recurrence])
  @@index([isEssential])
  @@index([userId, date])
}

// PLAID / BANK INTEGRATION MODELS

model BankAccount {
  id                  String   @id @default(cuid())
  userId              String
  plaidAccessToken    String   // Encrypted in production
  plaidItemId         String   @unique
  plaidInstitutionId  String?
  institutionName     String?
  accountName         String?
  accountType         String?  // checking, savings, credit card, etc.
  accountSubtype      String?
  mask                String?  // Last 4 digits
  availableBalance    Decimal? @db.Decimal(12, 2)
  currentBalance      Decimal? @db.Decimal(12, 2)
  currency            String   @default("USD")
  lastSyncedAt        DateTime?
  isActive            Boolean  @default(true)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions        Transaction[]

  @@index([userId])
  @@index([plaidItemId])
  @@index([userId, isActive])
}

model Transaction {
  id                    String   @id @default(cuid())
  userId                String
  bankAccountId         String
  plaidTransactionId    String   @unique
  amount                Decimal  @db.Decimal(12, 2)
  currency              String   @default("USD")
  date                  DateTime
  authorizedDate        DateTime?
  merchantName          String?
  category              String[]  // Plaid returns array of categories
  categoryId            String?
  pending               Boolean  @default(false)
  paymentChannel        String?  // online, in store, etc.
  isRecurring           Boolean  @default(false)
  detectedSubscriptionId String?
  mcc                   String?  // Merchant Category Code
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount           BankAccount  @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  detectedSubscription  Subscription? @relation(fields: [detectedSubscriptionId], references: [id])

  @@index([userId])
  @@index([bankAccountId])
  @@index([date])
  @@index([merchantName])
  @@index([isRecurring])
  @@index([userId, date])
  @@index([userId, isRecurring])
}

// NOTIFICATION MODELS

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  endpoint  String
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("push_subscriptions")
}

model NotificationSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  enabled              Boolean  @default(false)
  renewalReminders     Boolean  @default(true)
  priceChangeAlerts    Boolean  @default(true)
  weeklyDigest         Boolean  @default(false)
  digestDay           String   @default("monday") // monday, tuesday, etc.
  digestTime          String   @default("09:00") // HH:MM format
  leadDays            String   @default("7,3,1") // Comma-separated list of days
  timeOfDay           String   @default("09:00") // HH:MM format
  channels            String   @default("web,mobile") // Comma-separated channels
  priceChangeThreshold Int     @default(5) // Percentage threshold for price alerts
  renewalLeadDays     Int      @default(3) // Legacy field for compatibility
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification_settings")
}

model NotificationLog {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "push", "email", "local"
  title     String
  body      String
  status    String   @default("sent") // "sent", "failed", "pending"
  sentAt    DateTime
  data      Json?    // Additional notification data
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sentAt])
  @@index([status])
  @@index([type])
  @@map("notification_logs")
}

model ReminderSnapshot {
  id               String   @id @default(cuid())
  userId           String
  settings         Json     // Serialized reminder settings
  subscriptions    Json     // Snapshot of user's subscriptions at time of creation
  tzOffsetMinutes  Int      @default(0) // User's timezone offset
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isActive])
  @@index([createdAt])
  @@map("reminder_snapshots")
}

model ScheduledNotification {
  id            String   @id @default(cuid())
  userId        String
  subscriptionId String?
  title         String
  body          String
  scheduledFor  DateTime
  payload       Json     // Full notification payload
  status        String   @default("pending") // "pending", "sent", "failed", "cancelled"
  attempts      Int      @default(0)
  lastAttempt   DateTime?
  errorMessage  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([scheduledFor])
  @@index([status])
  @@index([subscriptionId])
  @@index([scheduledFor, status]) // Compound index for cron jobs
  @@map("scheduled_notifications")
}

// AI ENHANCED MODELS

model AIRecommendationLog {
  id                 String   @id @default(cuid())
  userId             String
  recommendationType String   // "bundle_optimization", "negotiation", "rotation", etc.
  insightId          String   // Reference to the specific insight that was applied
  title              String   // Human-readable title of the recommendation
  description        String?  // Detailed description of what was applied
  potentialSavings   Decimal? @db.Decimal(10, 2) // Expected savings amount
  actualSavings      Decimal? @db.Decimal(10, 2) // Actual savings (if measurable)
  status             AIRecommendationStatus @default(applied)
  appliedAt          DateTime @default(now())
  completedAt        DateTime? // When the recommendation was fully executed
  metadata           Json?    // Additional data about the recommendation
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([recommendationType])
  @@index([status])
  @@index([appliedAt])
  @@index([userId, status])
  @@map("ai_recommendation_logs")
}

model SavingsGoal {
  id              String   @id @default(cuid())
  userId          String
  title           String   @default("AI Savings Goal")
  description     String?  // Optional description of the goal
  targetAmount    Decimal  @db.Decimal(10, 2) // Target savings amount
  timeframeMonths Int      // Number of months to achieve the goal
  monthlyTarget   Decimal  @db.Decimal(10, 2) // Monthly savings target
  currentProgress Decimal  @db.Decimal(10, 2) @default(0) // Current savings achieved
  category        String?  // "subscriptions", "general", etc.
  status          SavingsGoalStatus @default(active)
  startDate       DateTime @default(now())
  targetDate      DateTime // Calculated end date
  achievedAt      DateTime? // When the goal was completed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([targetDate])
  @@index([userId, status])
  @@map("savings_goals")
}

model Reminder {
  id           String        @id @default(cuid())
  userId       String
  title        String
  description  String?
  dueDate      DateTime
  type         ReminderType
  relatedId    String?       // ID of related subscription, order, etc.
  priority     ReminderPriority @default(medium)
  completed    Boolean       @default(false)
  completedAt  DateTime?
  snoozeUntil  DateTime?     // For snoozing reminders
  recurring    Boolean       @default(false)
  recurringPattern String?   // "monthly", "weekly", etc.
  metadata     Json?         // Additional reminder data
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([dueDate])
  @@index([type])
  @@index([completed])
  @@index([priority])
  @@index([userId, completed])
  @@index([dueDate, completed])
  @@map("reminders")
}

model AIUserSettings {
  id                      String   @id @default(cuid())
  userId                  String   @unique
  
  // Core AI permissions
  allowDataAccess         Boolean  @default(false)
  enableAutomatedActions  Boolean  @default(false)
  
  // Subscription intelligence features
  enableBundleAnalysis    Boolean  @default(true)
  enableRotationPlanning  Boolean  @default(true)
  enableTrialTracking     Boolean  @default(true)
  enableCostPerUse        Boolean  @default(true)
  
  // Commerce optimization features
  enableNegotiationAssist Boolean  @default(true)
  enablePaymentOptimization Boolean @default(true)
  enableLateFeePrevention Boolean  @default(true)
  enableMarketComparison  Boolean  @default(true)
  
  // Behavioral analysis features
  enableSpendingAlerts    Boolean  @default(true)
  enableGoalBasedPlanning Boolean  @default(true)
  enableSeasonalOptimization Boolean @default(true)
  
  // AI configuration
  confidenceThreshold     Int      @default(70) // Percentage (50-95)
  analysisFrequency       AIAnalysisFrequency @default(weekly)
  savingsGoalAmount       Decimal? @db.Decimal(10, 2) // Monthly savings target
  autoApplyLowRisk        Boolean  @default(false) // Auto-apply low-risk recommendations
  
  // Privacy and data retention
  retainAnalysisHistory   Boolean  @default(true)
  dataRetentionDays       Int      @default(90)
  shareAnonymousInsights  Boolean  @default(false)
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("ai_user_settings")
}

model MarketDataCache {
  id              String   @id @default(cuid())
  userId          String?  // Null for global market data
  serviceCategory String   // "streaming", "internet", "phone", etc.
  serviceName     String?  // Specific service name
  averagePrice    Decimal  @db.Decimal(10, 2)
  currency        String   @default("USD")
  region          String   @default("US")
  dataSource      String   // "api", "scraping", "user_reported"
  sampleSize      Int?     // Number of data points used
  lastUpdated     DateTime @default(now())
  expiresAt       DateTime // When this cache entry expires
  metadata        Json?    // Additional market data
  
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([serviceCategory])
  @@index([serviceName])
  @@index([expiresAt])
  @@index([region])
  @@index([userId])
  @@unique([serviceCategory, serviceName, region]) // Prevent duplicates
  @@map("market_data_cache")
}

model UsageTracking {
  id             String   @id @default(cuid())
  userId         String
  subscriptionId String?  // Reference to subscription if applicable
  serviceName    String
  usageDate      DateTime @default(now())
  usageType      String   // "login", "view", "download", "stream", etc.
  usageCount     Int      @default(1)
  metadata       Json?    // Additional usage metadata
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([subscriptionId])
  @@index([serviceName])
  @@index([usageDate])
  @@index([userId, serviceName])
  @@map("usage_tracking")
}

// ENUMS

/// Stripe subscription lifecycle states we care about.
/// Mirrors Stripe's status strings for easy mapping.
enum PlanStatus {
  trialing
  active
  past_due
  unpaid
  canceled
  incomplete
  incomplete_expired
  paused
}

/// Cadences used by subscriptions and expense recurrence.
/// We allow a shared enum so the API can map cleanly.
enum Recurrence {
  none
  daily
  weekly
  monthly
  yearly
  custom
}

/// Subscription lifecycle inside Needix (separate from Stripe planStatus).
enum SubscriptionStatus {
  active
  paused
  canceled
}

/// Order lifecycle status to track order fulfillment.
enum OrderStatus {
  active
  completed
  cancelled
}

/// AI recommendation status tracking
enum AIRecommendationStatus {
  applied      // Recommendation was applied
  pending      // Waiting for user action
  completed    // Recommendation was fully executed
  failed       // Recommendation failed to apply
  dismissed    // User dismissed the recommendation
  expired      // Recommendation expired
}

/// Savings goal status
enum SavingsGoalStatus {
  active       // Goal is currently being pursued
  completed    // Goal was achieved
  paused       // Goal is temporarily paused
  cancelled    // Goal was cancelled
  expired      // Goal deadline passed without completion
}

/// Types of reminders the AI can create
enum ReminderType {
  subscription_renewal    // Upcoming subscription renewal
  payment_optimization   // Switch payment method
  late_fee_prevention   // Check balance before renewal
  category_alert        // Spending category limit
  savings_milestone     // Monthly savings goal check
  streaming_rotation    // Rotate streaming services
  negotiation_call      // Call to negotiate price
  trial_opportunity     // Available trial or discount
  bundle_switch         // Switch to bundle offer
  warranty_review       // Review warranty coverage
  seasonal_pause        // Pause seasonal service
  price_change_alert    // Service price increased
  unused_service        // Service not being used
  duplicate_service     // Duplicate service detected
  goal_check           // Check progress on savings goal
}

/// Priority levels for reminders
enum ReminderPriority {
  low
  medium
  high
  urgent
}

/// How frequently AI should analyze user data
enum AIAnalysisFrequency {
  daily
  weekly
  monthly
}

model PlaidItem {
  id              String        @id @default(cuid())
  userId          String
  accessToken     String        // Encrypted in production
  itemId          String        @unique
  institutionId   String?
  institutionName String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts        PlaidAccount[]
  transactions    PlaidTransaction[]
  
  @@map("plaid_items")
}

model PlaidAccount {
  id          String     @id @default(cuid())
  plaidItemId String
  accountId   String     @unique
  name        String
  type        String
  subtype     String?
  mask        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  plaidItem   PlaidItem  @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)
  transactions PlaidTransaction[]
  
  @@map("plaid_accounts")
}

model PlaidTransaction {
  id              String       @id @default(cuid())
  plaidItemId     String
  plaidAccountId  String
  transactionId   String       @unique
  amount          Float
  date            DateTime
  name            String
  merchantName    String?
  category        String[]
  subcategory     String?
  isSubscription  Boolean      @default(false)
  confidence      Float?       // Confidence that this is a subscription
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  plaidItem       PlaidItem    @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)
  plaidAccount    PlaidAccount @relation(fields: [plaidAccountId], references: [id], onDelete: Cascade)
  
  @@map("plaid_transactions")
}