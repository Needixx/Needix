// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model WebhookEvent {
  id         String   @id
  type       String
  receivedAt DateTime @default(now())
}

model User {
  id                       String         @id @default(cuid())
  name                     String?
  email                    String?        @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?
  passwordResetToken       String?        @unique
  passwordResetTokenExpiry DateTime?
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  isPro                    Boolean        @default(false)
  stripeCustomerId         String?        @unique
  stripeSubscriptionId     String?        @unique
  planStatus               PlanStatus?
  currentPeriodEnd         DateTime?
  cancelAtPeriodEnd        Boolean?       @default(false)
  
  // 2FA Fields
  twoFactorEnabled         Boolean        @default(false)
  
  // Relations
  accounts                 Account[]
  expenses                 Expense[]
  orders                   Order[]
  sessions                 Session[]
  subscriptions            Subscription[]
  verificationCodes        VerificationCode[]
  chatMessages             ChatMessage[]

  // Notification-related relations
  pushSubscription         PushSubscription?
  notificationSettings     NotificationSettings?
  notificationLogs         NotificationLog[]
  reminderSnapshots        ReminderSnapshot[]
  scheduledNotifications   ScheduledNotification[]

  @@index([email])
  @@index([stripeCustomerId])
  @@index([isPro])
  @@index([twoFactorEnabled])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])
  @@index([used])
  @@index([userId, used])
  @@map("verification_codes")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  role      String   // "user" or "assistant"
  content   String
  context   String?  // Optional context data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([userId, createdAt])
}

model SubscriptionEvent {
  id        String   @id @default(cuid())
  userId    String
  userEmail String
  event     String
  timestamp DateTime @default(now())
  metadata  Json?

  @@index([userId])
  @@index([timestamp])
}

model UserActivity {
  id                 String   @id @default(cuid())
  userId             String
  subscriptionsCount Int
  lastActiveDate     DateTime
  totalSpent         Float    @default(0)
  planType           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
  @@index([lastActiveDate])
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String
  name            String
  amount          Decimal            @db.Decimal(12, 2)
  currency        String             @default("USD")
  interval        Recurrence         @default(monthly)
  nextBillingAt   DateTime?
  nextBillingDate String?            // String version for compatibility
  notes           String?
  category        String?
  vendorUrl       String?
  status          SubscriptionStatus @default(active)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  isEssential     Boolean            @default(false)
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([interval])
  @@index([isEssential])
  @@index([userId, status])
  @@index([userId, nextBillingAt])
  @@index([nextBillingAt])
  @@index([nextBillingDate])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  merchant    String
  total       Decimal     @db.Decimal(12, 2)
  currency    String      @default("USD")
  orderDate   DateTime    @default(now())
  status      OrderStatus @default(active)
  notes       String?
  category    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isEssential Boolean     @default(false)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@index([userId])
  @@index([orderDate])
  @@index([merchant])
  @@index([status])
  @@index([isEssential])
  @@index([userId, orderDate])
  @@index([userId, status])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  name      String
  qty       Int      @default(1)
  unitPrice Decimal? @db.Decimal(12, 2)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Expense {
  id          String     @id @default(cuid())
  userId      String
  description String
  amount      Decimal    @db.Decimal(12, 2)
  currency    String     @default("USD")
  date        DateTime   @default(now())
  merchant    String?
  category    String?
  recurrence  Recurrence @default(none)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isEssential Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([recurrence])
  @@index([isEssential])
  @@index([userId, date])
}

// NOTIFICATION MODELS

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  endpoint  String
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("push_subscriptions")
}

model NotificationSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  enabled              Boolean  @default(false)
  renewalReminders     Boolean  @default(true)
  priceChangeAlerts    Boolean  @default(true)
  weeklyDigest         Boolean  @default(false)
  digestDay           String   @default("monday") // monday, tuesday, etc.
  digestTime          String   @default("09:00") // HH:MM format
  leadDays            String   @default("7,3,1") // Comma-separated list of days
  timeOfDay           String   @default("09:00") // HH:MM format
  channels            String   @default("web,mobile") // Comma-separated channels
  priceChangeThreshold Int     @default(5) // Percentage threshold for price alerts
  renewalLeadDays     Int      @default(3) // Legacy field for compatibility
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notification_settings")
}

model NotificationLog {
  id        String   @id @default(cuid())
  userId    String
  type      String   // "push", "email", "local"
  title     String
  body      String
  status    String   @default("sent") // "sent", "failed", "pending"
  sentAt    DateTime
  data      Json?    // Additional notification data
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([sentAt])
  @@index([status])
  @@index([type])
  @@map("notification_logs")
}

model ReminderSnapshot {
  id               String   @id @default(cuid())
  userId           String
  settings         Json     // Serialized reminder settings
  subscriptions    Json     // Snapshot of user's subscriptions at time of creation
  tzOffsetMinutes  Int      @default(0) // User's timezone offset
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isActive])
  @@index([createdAt])
  @@map("reminder_snapshots")
}

model ScheduledNotification {
  id            String   @id @default(cuid())
  userId        String
  subscriptionId String?
  title         String
  body          String
  scheduledFor  DateTime
  payload       Json     // Full notification payload
  status        String   @default("pending") // "pending", "sent", "failed", "cancelled"
  attempts      Int      @default(0)
  lastAttempt   DateTime?
  errorMessage  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([scheduledFor])
  @@index([status])
  @@index([subscriptionId])
  @@index([scheduledFor, status]) // Compound index for cron jobs
  @@map("scheduled_notifications")
}

// ENUMS

/// Stripe subscription lifecycle states we care about.
/// Mirrors Stripe's status strings for easy mapping.
enum PlanStatus {
  trialing
  active
  past_due
  unpaid
  canceled
  incomplete
  incomplete_expired
  paused
}

/// Cadences used by subscriptions and expense recurrence.
/// We allow a shared enum so the API can map cleanly.
enum Recurrence {
  none
  daily
  weekly
  monthly
  yearly
  custom
}

/// Subscription lifecycle inside Needix (separate from Stripe planStatus).
enum SubscriptionStatus {
  active
  paused
  canceled
}

/// Order lifecycle status to track order fulfillment.
enum OrderStatus {
  active
  completed
  cancelled
}