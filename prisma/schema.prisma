// prisma/schema.prisma  (FULL FILE ‚Äî paste & save)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/* =========================
   Stripe / Webhooks / Pro
   ========================= */

model WebhookEvent {
  id         String   @id            // Stripe event.id
  type       String
  receivedAt DateTime @default(now())
}

/// Stripe subscription lifecycle states we care about.
/// Mirrors Stripe's status strings for easy mapping.
enum PlanStatus {
  trialing
  active
  past_due
  unpaid
  canceled
  incomplete
  incomplete_expired
  paused
}

/* ==============
   NextAuth core
   ============== */

model User {
  id                       String    @id @default(cuid())
  name                     String?
  email                    String?   @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?
  passwordResetToken       String?   @unique
  passwordResetTokenExpiry DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // üîê Stripe + Pro fields
  isPro                Boolean     @default(false)
  stripeCustomerId     String?     @unique
  stripeSubscriptionId String?     @unique
  planStatus           PlanStatus?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean?    @default(false)

  // üí≥ Needix data relations
  subscriptions Subscription[]
  orders        Order[]
  expenses      Expense[]
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/* =========================
   Engagement / Telemetry
   ========================= */

model SubscriptionEvent {
  id        String   @id @default(cuid())
  userId    String
  userEmail String
  event     String   // 'subscribed', 'cancelled', 'renewed', 'failed_payment'
  timestamp DateTime @default(now())
  metadata  Json?

  // (kept as a loose reference; join by userId when needed)
}

model UserActivity {
  id                 String   @id @default(cuid())
  userId             String
  subscriptionsCount Int
  lastActiveDate     DateTime
  totalSpent         Float    @default(0)
  planType           String   // 'free' or 'pro'
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // (kept as a loose reference; join by userId when needed)
}

/* =========================
   Needix Core Data Models
   ========================= */

/// Cadences used by subscriptions and expense recurrence.
/// We allow a shared enum so the API can map cleanly.
enum Recurrence {
  none
  daily
  weekly
  monthly
  yearly
  custom
}

/// Subscription lifecycle inside Needix (separate from Stripe planStatus).
enum SubscriptionStatus {
  active
  paused
  canceled
}

model Subscription {
  id            String             @id @default(cuid())
  userId        String
  name          String
  amount        Decimal            @db.Decimal(12, 2)
  currency      String             @default("USD")
  interval      Recurrence         @default(monthly) // monthly is the common case
  nextBillingAt DateTime?
  notes         String?
  category      String?
  vendorUrl     String?
  status        SubscriptionStatus @default(active)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([status])
  @@index([interval])
  @@index([userId, status])
  @@index([userId, nextBillingAt])
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  merchant  String
  total     Decimal  @db.Decimal(12, 2)
  currency  String   @default("USD")
  orderDate DateTime @default(now())
  notes     String?
  category  String?

  items     OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([orderDate])
  @@index([merchant])
  @@index([userId, orderDate])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  name      String
  qty       Int      @default(1)
  unitPrice Decimal? @db.Decimal(12, 2)

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Expense {
  id          String     @id @default(cuid())
  userId      String
  description String
  amount      Decimal     @db.Decimal(12, 2)
  currency    String      @default("USD")
  date        DateTime    @default(now())
  merchant    String?
  category    String?
  recurrence  Recurrence  @default(none)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([userId])
  @@index([date])
  @@index([recurrence])
  @@index([userId, date])
}
