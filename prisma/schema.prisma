// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // Correct syntax
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(cuid())
  name                     String?
  email                    String?   @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?   // For credentials login
  passwordResetToken       String?   @unique // For password reset functionality
  passwordResetTokenExpiry DateTime? // Token expiration time
  accounts                 Account[]
  sessions                 Session[]
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  // For PostgreSQL, use Text for potentially long tokens
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SubscriptionEvent {
  id        String   @id @default(cuid())
  userId    String
  userEmail String
  event     String   // 'subscribed', 'cancelled', 'renewed', 'failed_payment'
  timestamp DateTime @default(now())
  metadata  Json?    // Store additional data like plan type, amount, etc.
}

model UserActivity {
  id             String   @id @default(cuid())
  userId         String
  subscriptionsCount Int
  lastActiveDate DateTime
  totalSpent     Float    @default(0)
  planType       String   // 'free' or 'pro'
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}