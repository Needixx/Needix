// prisma/schema.prisma  (FULL FILE ‚Äî paste & save)
generator client {
  provider = "prisma-client-js"
}

model WebhookEvent {
  id         String   @id            // Stripe event.id
  type       String
  receivedAt DateTime @default(now())
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Stripe subscription lifecycle states we care about.
/// Mirrors Stripe's status strings for easy mapping.
enum PlanStatus {
  trialing
  active
  past_due
  unpaid
  canceled
  incomplete
  incomplete_expired
  paused
}

model User {
  id                       String    @id @default(cuid())
  name                     String?
  email                    String?   @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?
  passwordResetToken       String?   @unique
  passwordResetTokenExpiry DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // üîê Stripe + Pro fields
  isPro                Boolean     @default(false)
  stripeCustomerId     String?     @unique
  stripeSubscriptionId String?     @unique
  planStatus           PlanStatus?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean?    @default(false)
}

model Account {
  id                String @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String

  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SubscriptionEvent {
  id        String   @id @default(cuid())
  userId    String
  userEmail String
  event     String // 'subscribed', 'cancelled', 'renewed', 'failed_payment'
  timestamp DateTime @default(now())
  metadata  Json?
}

model UserActivity {
  id                 String   @id @default(cuid())
  userId             String
  subscriptionsCount Int
  lastActiveDate     DateTime
  totalSpent         Float    @default(0)
  planType           String // 'free' or 'pro'
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

