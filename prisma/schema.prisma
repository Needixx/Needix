generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model WebhookEvent {
  id         String   @id
  type       String
  receivedAt DateTime @default(now())

  @@index([receivedAt])
}

model User {
  id                       String                  @id @default(cuid())
  name                     String?
  email                    String?                 @unique
  emailVerified            DateTime?
  image                    String?
  password                 String?
  passwordResetToken       String?                 @unique
  passwordResetTokenExpiry DateTime?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  isPro                    Boolean                 @default(false)
  stripeCustomerId         String?                 @unique
  stripeSubscriptionId     String?                 @unique
  planStatus               PlanStatus?
  currentPeriodEnd         DateTime?
  cancelAtPeriodEnd        Boolean?                @default(false)
  twoFactorEnabled         Boolean                 @default(false)

  // Relations
  accounts                 Account[]
  bankAccounts             BankAccount[]
  chatMessages             ChatMessage[]
  expenses                 Expense[]
  orders                   Order[]
  sessions                 Session[]
  subscriptions            Subscription[]
  transactions             Transaction[]
  aiRecommendationLogs     AIRecommendationLog[]
  aiSettings               AIUserSettings?
  marketDataCache          MarketDataCache[]
  notificationLogs         NotificationLog[]
  notificationSettings     NotificationSettings?
  plaidItems               PlaidItem[]
  pushSubscription         PushSubscription?
  reminderSnapshots        ReminderSnapshot[]
  reminders                Reminder[]
  savingsGoals             SavingsGoal[]
  scheduledNotifications   ScheduledNotification[]
  usageTracking            UsageTracking[]
  verificationCodes        VerificationCode[]

  // New: userâ€™s IANA timezone
  timezone                 String?                 @db.VarChar(64)

  @@index([email])
  @@index([stripeCustomerId])
  @@index([isPro])
  @@index([twoFactorEnabled])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([used])
  @@index([userId, used])
  @@map("verification_codes")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  role      String
  content   String
  context   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([userId, createdAt])
}

model SubscriptionEvent {
  id        String   @id @default(cuid())
  userId    String
  userEmail String
  event     String
  timestamp DateTime @default(now())
  metadata  Json?

  @@index([userId])
  @@index([timestamp])
}

model UserActivity {
  id                 String   @id @default(cuid())
  userId             String
  subscriptionsCount Int
  lastActiveDate     DateTime
  totalSpent         Float    @default(0)
  planType           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
  @@index([lastActiveDate])
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  name                 String
  amount               Decimal            @db.Decimal(12, 2)
  currency             String             @default("USD")
  interval             Recurrence         @default(monthly)
  nextBillingAt        DateTime?
  nextBillingDate      String?
  notes                String?
  category             String?
  vendorUrl            String?
  status               SubscriptionStatus @default(active)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  isEssential          Boolean            @default(false)
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  detectedTransactions Transaction[]

  @@index([userId])
  @@index([status])
  @@index([interval])
  @@index([isEssential])
  @@index([userId, status])
  @@index([userId, nextBillingAt])
  @@index([nextBillingAt])
  @@index([nextBillingDate])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  merchant    String
  total       Decimal     @db.Decimal(12, 2)
  currency    String      @default("USD")
  orderDate   DateTime    @default(now())
  status      OrderStatus @default(active)
  notes       String?
  category    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isEssential Boolean     @default(false)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@index([userId])
  @@index([orderDate])
  @@index([merchant])
  @@index([status])
  @@index([isEssential])
  @@index([userId, orderDate])
  @@index([userId, status])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  name      String
  qty       Int      @default(1)
  unitPrice Decimal? @db.Decimal(12, 2)
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Expense {
  id          String     @id @default(cuid())
  userId      String
  description String
  amount      Decimal    @db.Decimal(12, 2)
  currency    String     @default("USD")
  date        DateTime   @default(now())
  merchant    String?
  category    String?
  recurrence  Recurrence @default(none)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isEssential Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([date])
  @@index([recurrence])
  @@index([isEssential])
  @@index([userId, date])
}

model BankAccount {
  id                 String        @id @default(cuid())
  userId             String
  plaidAccessToken   String
  plaidItemId        String        @unique
  plaidInstitutionId String?
  institutionName    String?
  accountName        String?
  accountType        String?
  accountSubtype     String?
  mask               String?
  availableBalance   Decimal?      @db.Decimal(12, 2)
  currentBalance     Decimal?      @db.Decimal(12, 2)
  currency           String        @default("USD")
  lastSyncedAt       DateTime?
  isActive           Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions       Transaction[]

  @@index([userId])
  @@index([plaidItemId])
  @@index([userId, isActive])
}

model Transaction {
  id                     String        @id @default(cuid())
  userId                 String
  bankAccountId          String
  plaidTransactionId     String        @unique
  amount                 Decimal       @db.Decimal(12, 2)
  currency               String        @default("USD")
  date                   DateTime
  authorizedDate         DateTime?
  merchantName           String?
  category               String[]
  categoryId             String?
  pending                Boolean       @default(false)
  paymentChannel         String?
  isRecurring            Boolean       @default(false)
  detectedSubscriptionId String?
  mcc                    String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  bankAccount            BankAccount   @relation(fields: [bankAccountId], references: [id], onDelete: Cascade)
  detectedSubscription   Subscription? @relation(fields: [detectedSubscriptionId], references: [id])
  user                   User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([bankAccountId])
  @@index([date])
  @@index([merchantName])
  @@index([isRecurring])
  @@index([userId, date])
  @@index([userId, isRecurring])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String   @unique
  endpoint  String
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

model NotificationSettings {
  id                   String   @id @default(cuid())
  userId               String   @unique
  enabled              Boolean  @default(false)
  renewalReminders     Boolean  @default(true)
  priceChangeAlerts    Boolean  @default(true)
  weeklyDigest         Boolean  @default(false)
  digestDay            String   @default("monday")
  digestTime           String   @default("09:00")
  leadDays             String   @default("7,3,1")
  timeOfDay            String   @default("09:00")
  channels             String   @default("web,mobile")
  priceChangeThreshold Int      @default(5)
  renewalLeadDays      Int      @default(3)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model NotificationLog {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  body      String
  status    String   @default("sent")
  sentAt    DateTime
  data      Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sentAt])
  @@index([status])
  @@index([type])
  @@map("notification_logs")
}

model ReminderSnapshot {
  id              String   @id @default(cuid())
  userId          String
  settings        Json
  subscriptions   Json
  tzOffsetMinutes Int      @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isActive])
  @@index([createdAt])
  @@map("reminder_snapshots")
}

model ScheduledNotification {
  id             String    @id @default(cuid())
  userId         String
  subscriptionId String?
  title          String
  body           String
  scheduledFor   DateTime
  payload        Json
  status         String    @default("pending")
  attempts       Int       @default(0)
  lastAttempt    DateTime?
  errorMessage   String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([scheduledFor])
  @@index([status])
  @@index([subscriptionId])
  @@index([scheduledFor, status])
  @@map("scheduled_notifications")
}

model AIRecommendationLog {
  id                 String                 @id @default(cuid())
  userId             String
  recommendationType String
  insightId          String
  title              String
  description        String?
  potentialSavings   Decimal?               @db.Decimal(10, 2)
  actualSavings      Decimal?               @db.Decimal(10, 2)
  status             AIRecommendationStatus @default(applied)
  appliedAt          DateTime               @default(now())
  completedAt        DateTime?
  metadata           Json?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([recommendationType])
  @@index([status])
  @@index([appliedAt])
  @@index([userId, status])
  @@map("ai_recommendation_logs")
}

model SavingsGoal {
  id              String            @id @default(cuid())
  userId          String
  title           String            @default("AI Savings Goal")
  description     String?
  targetAmount    Decimal           @db.Decimal(10, 2)
  timeframeMonths Int
  monthlyTarget   Decimal           @db.Decimal(10, 2)
  currentProgress Decimal           @default(0) @db.Decimal(10, 2)
  category        String?
  status          SavingsGoalStatus @default(active)
  startDate       DateTime          @default(now())
  targetDate      DateTime
  achievedAt      DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([targetDate])
  @@index([userId, status])
  @@map("savings_goals")
}

model Reminder {
  id               String           @id @default(cuid())
  userId           String
  title            String
  description      String?
  dueDate          DateTime
  type             ReminderType
  relatedId        String?
  priority         ReminderPriority @default(medium)
  completed        Boolean          @default(false)
  completedAt      DateTime?
  snoozeUntil      DateTime?
  recurring        Boolean          @default(false)
  recurringPattern String?
  metadata         Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([dueDate])
  @@index([type])
  @@index([completed])
  @@index([priority])
  @@index([userId, completed])
  @@index([dueDate, completed])
  @@map("reminders")
}

model AIUserSettings {
  id                         String              @id @default(cuid())
  userId                     String              @unique
  allowDataAccess            Boolean             @default(false)
  enableAutomatedActions     Boolean             @default(false)
  enableBundleAnalysis       Boolean             @default(true)
  enableRotationPlanning     Boolean             @default(true)
  enableTrialTracking        Boolean             @default(true)
  enableCostPerUse           Boolean             @default(true)
  enableNegotiationAssist    Boolean             @default(true)
  enablePaymentOptimization  Boolean             @default(true)
  enableLateFeePrevention    Boolean             @default(true)
  enableMarketComparison     Boolean             @default(true)
  enableSpendingAlerts       Boolean             @default(true)
  enableGoalBasedPlanning    Boolean             @default(true)
  enableSeasonalOptimization Boolean             @default(true)
  confidenceThreshold        Int                 @default(70)
  analysisFrequency          AIAnalysisFrequency @default(weekly)
  savingsGoalAmount          Decimal?            @db.Decimal(10, 2)
  autoApplyLowRisk           Boolean             @default(false)
  retainAnalysisHistory      Boolean             @default(true)
  dataRetentionDays          Int                 @default(90)
  shareAnonymousInsights     Boolean             @default(false)
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  user                       User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ai_user_settings")
}

model MarketDataCache {
  id              String   @id @default(cuid())
  userId          String?
  serviceCategory String
  serviceName     String?
  averagePrice    Decimal  @db.Decimal(10, 2)
  currency        String   @default("USD")
  region          String   @default("US")
  dataSource      String
  sampleSize      Int?
  lastUpdated     DateTime @default(now())
  expiresAt       DateTime
  metadata        Json?
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([serviceCategory, serviceName, region])
  @@index([serviceCategory])
  @@index([serviceName])
  @@index([expiresAt])
  @@index([region])
  @@index([userId])
  @@map("market_data_cache")
}

model UsageTracking {
  id             String   @id @default(cuid())
  userId         String
  subscriptionId String?
  serviceName    String
  usageDate      DateTime @default(now())
  usageType      String
  usageCount     Int      @default(1)
  metadata       Json?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subscriptionId])
  @@index([serviceName])
  @@index([usageDate])
  @@index([userId, serviceName])
  @@map("usage_tracking")
}

model PlaidItem {
  id              String             @id @default(cuid())
  userId          String
  accessToken     String
  itemId          String             @unique
  institutionId   String?
  institutionName String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  accounts        PlaidAccount[]
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions    PlaidTransaction[]

  @@map("plaid_items")
}

model PlaidAccount {
  id           String             @id @default(cuid())
  plaidItemId  String
  accountId    String             @unique
  name         String
  type         String
  subtype      String?
  mask         String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  plaidItem    PlaidItem          @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)
  transactions PlaidTransaction[]

  @@map("plaid_accounts")
}

model PlaidTransaction {
  id             String       @id @default(cuid())
  plaidItemId    String
  plaidAccountId String
  transactionId  String       @unique
  amount         Float
  date           DateTime
  name           String
  merchantName   String?
  category       String[]
  subcategory    String?
  isSubscription Boolean      @default(false)
  confidence     Float?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  plaidAccount   PlaidAccount @relation(fields: [plaidAccountId], references: [id], onDelete: Cascade)
  plaidItem      PlaidItem    @relation(fields: [plaidItemId], references: [id], onDelete: Cascade)

  @@map("plaid_transactions")
}

model playing_with_neon {
  id    Int    @id @default(autoincrement())
  name  String
  value Float? @db.Real
}

/// Stripe subscription lifecycle states we care about.
/// Mirrors Stripe's status strings for easy mapping.
enum PlanStatus {
  trialing
  active
  past_due
  unpaid
  canceled
  incomplete
  incomplete_expired
  paused
}

/// Cadences used by subscriptions and expense recurrence.
/// We allow a shared enum so the API can map cleanly.
enum Recurrence {
  none
  daily
  weekly
  monthly
  yearly
  custom
}

/// Subscription lifecycle inside Needix (separate from Stripe planStatus).
enum SubscriptionStatus {
  active
  paused
  canceled
}

/// Order lifecycle status to track order fulfillment.
enum OrderStatus {
  active
  completed
  cancelled
}

/// AI recommendation status tracking
enum AIRecommendationStatus {
  applied
  pending
  completed
  failed
  dismissed
  expired
}

/// Savings goal status
enum SavingsGoalStatus {
  active
  completed
  paused
  cancelled
  expired
}

/// Types of reminders the AI can create
enum ReminderType {
  subscription_renewal
  payment_optimization
  late_fee_prevention
  category_alert
  savings_milestone
  streaming_rotation
  negotiation_call
  trial_opportunity
  bundle_switch
  warranty_review
  seasonal_pause
  price_change_alert
  unused_service
  duplicate_service
  goal_check
}

/// Priority levels for reminders
enum ReminderPriority {
  low
  medium
  high
  urgent
}

/// How frequently AI should analyze user data
enum AIAnalysisFrequency {
  daily
  weekly
  monthly
}
